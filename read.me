Here is a summary of all code in your Flutter workspace relevant to session management, token rotation, and logout/session clearing. This includes where tokens are loaded, refreshed, expired, and where session/logout logic is handled.

---

## 1. **Token and Session Storage**

- **SharedPreferences** is used throughout the app to store and retrieve:
  - `token` (access token)
  - `refreshToken`
  - `sessionId`
  - `user` (user data)
  - `tokenExpiry` (expiry timestamp)

**Relevant files:**
- `lib/providers/auth_provider.dart`
- `lib/Dashboard/loginTest.dart`
- `lib/Dashboard/register.dart`
- `lib/Dashboard/wishlistPage.dart`
- `lib/Product Detail/productDetails2.dart`
- `lib/homePage/widgets/cartPage.dart`
- `lib/homePage/widgets/section2.dart`
- `lib/homePage/widgets/productCard.dart`
- `lib/homePage/widgets/wishlistIcon.dart`
- `lib/homePage/widgets/bannerSub.dart`
- `lib/homePage/widgets/explore.dart`
- `lib/homePage/widgets/search.dart`
- `lib/providers/cart_provider.dart`
- `lib/providers/wishlist_provider.dart`

---

## 2. **Token Loading and Expiry Check**

- **Tokens are loaded** from SharedPreferences in `AuthProvider` (see `loadTokens()`).
- **Token expiry** is checked using the `isTokenExpired` getter in `AuthProvider`.
- If the token is expired or about to expire, the app attempts to refresh it.

---

## 3. **Token Refresh Logic**

- **`refreshToken()`** in `AuthProvider`:
  - Uses the stored `refreshToken` to request a new access token from `/api/v1/auth/refresh-token`.
  - If successful, updates both tokens and expiry in SharedPreferences.
  - If refresh fails (expired/invalid refresh token), logs out the user and clears session.

- **Automatic token refresh** is scheduled with a timer (`_scheduleTokenRefresh()`), so the app tries to refresh the token before it expires.

---

## 4. **Session Clearing and Logout**

- **`logout()`** and **`forceLogout()`** in `AuthProvider`:
  - Remove all session-related keys from SharedPreferences.
  - Clear in-memory variables for token, refreshToken, sessionId, user, and expiry.
  - Set authentication status to unauthenticated.
  - Navigates to the login screen if `forceLogout` is called with a context.

- **Logout triggers:**
  - User taps "Logout" (now a TextButton, not an IconButton, in `myproile.dart`).
  - Token refresh fails (expired/invalid refresh token).
  - Access token is expired and cannot be refreshed.
  - 401 responses from the backend in various providers and screens.

---

## 5. **Global Handling of 401/Expired Token**

- **401 responses** in API calls (e.g., in `cart_provider.dart`, `wishlistPage.dart`, `productDetails2.dart`, `section2.dart`, `cartPage.dart`, etc.) trigger `forceLogout()` with a message like "Session expired. Please login again."
- This ensures the user is logged out and session is cleared everywhere in the app if the token is invalid/expired.

---

## 6. **Token Rotation**

- When a new access token is issued (either on login or refresh), both the access and refresh tokens are updated in SharedPreferences.
- The expiry time is updated either from the backend response or by decoding the JWT.

---

## 7. **SessionId Management**

- `sessionId` is also stored and cleared in SharedPreferences as part of the session management process.

---

## 8. **UI Changes**

- The logout button in the profile screen (`myproile.dart`) is now a TextButton labeled "Logout" instead of an icon.

---

## 9. **Summary Table**

| Feature                | Where Handled (Files/Classes)                | How It Works                                      |
|------------------------|----------------------------------------------|---------------------------------------------------|
| Token Storage          | SharedPreferences, `auth_provider.dart`      | On login/refresh, tokens saved to preferences     |
| Token Expiry Check     | `auth_provider.dart` (`isTokenExpired`)      | Checks expiry before API calls                    |
| Token Refresh          | `auth_provider.dart` (`refreshToken()`)      | Refreshes token, updates storage, reschedules     |
| Session Clearing       | `auth_provider.dart` (`logout`, `forceLogout`)| Removes all session data, navigates to login      |
| 401 Handling           | All API providers/screens                    | Calls `forceLogout` on 401/expired token          |
| UI Logout              | `myproile.dart`                              | TextButton "Logout" calls logout logic            |
| SessionId Management   | SharedPreferences, `auth_provider.dart`      | Stored/cleared with other session data            |

---

**In summary:**  
Session management in your Flutter app is handled by storing tokens and session data in SharedPreferences, checking and refreshing tokens as needed, and clearing all session data and logging out the user on token expiry, refresh failure, or 401 errors. All relevant screens and providers use this logic to ensure consistent session handling and user experience.Hereâ€™s a summary of the session management changes made across the codebase:

---

### Session Management Changes Summary

1. **Centralized Force Logout Logic**
   - A `forceLogout` method is now used throughout the app to clear session data and redirect users to the login screen when a session/token is invalid or expired.
   - This method is implemented in the `AuthProvider` and called from UI and provider files.

2. **Token Expiry & Refresh Handling**
   - All API calls that require authentication now check for a `401 Unauthorized` response.
   - On receiving a 401, the app triggers `forceLogout`, ensuring the user is logged out and session data is cleared.
   - Token refresh logic is handled in `AuthProvider`. If token refresh fails, `forceLogout` is called.

3. **Consistent Use in Providers and Screens**
   - All providers (cart, wishlist, etc.) and screens (login, register, profile, cart, wishlist, etc.) now use the centralized `forceLogout` for session expiry.
   - This ensures users are always logged out and redirected if their session is invalid, expired, or refresh fails.

4. **SharedPreferences Cleanup**
   - On logout or force logout, all relevant session keys (`token`, `user`, `refreshToken`, `sessionId`, etc.) are removed from `SharedPreferences`.

5. **User Experience**
   - Users are shown a toast message when their session expires or is invalid, prompting them to log in again.
   - Navigation is reset to the login screen to prevent access to protected routes after session expiry.

6. **DRY Principle**
   - The session management logic is not duplicated; instead, it is reused via the `forceLogout` utility, making maintenance easier and reducing bugs.

---

**Result:**  
The app now robustly handles session expiry, token invalidation, and refresh failures, ensuring users are securely logged out and session data is always cleared when needed.